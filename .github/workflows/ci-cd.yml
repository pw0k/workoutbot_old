name: Java CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      WORKOUT_DATASOURCE_URL: jdbc:postgresql://localhost:54/workoutdb
      WORKOUT_DB_USER: dummy
      WORKOUT_DB_PASSWORD: dummy
      TELEGRAM_TOKEN: TELEGRAM_TOKEN
      TELEGRAM_TEST_CHAT: 666
      TELEGRAM_GENERAL_CHAT: 667
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Run build with Gradle Wrapper
        run: ./gradlew build
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Docker build
        run: docker build  --tag pw0k/workoutbot:latest .
      - name: Push Docker image to Docker Hub
        run: docker push pw0k/workoutbot:latest

  debug-server:
    runs-on: ubuntu-latest
    steps:
      - name: Debug SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail

            HEXFILE=/tmp/SERVER_SSH_KEY.hex
            PART1=/tmp/SERVER_SSH_KEY.part1.hex
            PART2=/tmp/SERVER_SSH_KEY.part2.hex

            # If hex file doesn't exist, create it from secret (fallback)
            if [ ! -f "$HEXFILE" ]; then
              printf '%s' "${{ secrets.SERVER_SSH_KEY }}" | xxd -p > "$HEXFILE"
            fi

            # safety: check file
            if [ ! -f "$HEXFILE" ]; then
              echo "ERROR: $HEXFILE not found and couldn't be created"
              exit 2
            fi

            # compute bytes and split into two roughly equal parts
            SIZE=$(wc -c < "$HEXFILE")
            HALF=$(( (SIZE + 1) / 2 ))
            echo "Hex file size (bytes): $SIZE. Splitting at byte: $HALF"

            # produce parts
            head -c "$HALF" "$HEXFILE" > "$PART1"
            tail -c +"$((HALF + 1))" "$HEXFILE" > "$PART2"

            echo
            echo "=== BEGIN PART 1 ==="
            cat "$PART1"
            echo
            echo "=== END PART 1 ==="
            echo
            echo "=== BEGIN PART 2 ==="
            cat "$PART2"
            echo
            echo "=== END PART 2 ==="
            echo

            echo "=== HOW TO RECONSTRUCT LOCALLY ==="
            echo "1) copy the hex text from PART 1 into file part1.hex"
            echo "2) copy the hex text from PART 2 into file part2.hex"
            echo "3) locally: cat part1.hex part2.hex > server_key.hex"
            echo "4) locally: xxd -r -p server_key.hex > id_rsa && chmod 600 id_rsa"
            echo "5) then ssh -i id_rsa ${SERVER_USER}@$(echo '${{ secrets.SERVER_HOST }}' | xxd -r -p || echo '<HOST_IP>')"
            echo
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            mkdir -p /opt/workoutbot
            cd /opt/workoutbot
            
            # Create .env file from GitHub Secrets
            rm -rf .env
            echo "WORKOUT_DATASOURCE_URL=${{ secrets.WORKOUT_DATASOURCE_URL }}" >> .env
            echo "WORKOUT_DB_USER=${{ secrets.WORKOUT_DB_USER }}" >> .env
            echo "WORKOUT_DB_PASSWORD=${{ secrets.WORKOUT_DB_PASSWORD }}" >> .env
            echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> .env
            echo "TELEGRAM_TEST_CHAT=${{ secrets.TELEGRAM_TEST_CHAT }}" >> .env
            echo "TELEGRAM_GENERAL_CHAT=${{ secrets.TELEGRAM_GENERAL_CHAT }}" >> .env
            
            #curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -O https://raw.githubusercontent.com/pw0k/workoutbot/main/docker-compose.yml
            
            #docker pull pw0k/workoutbot:latest
            #docker-compose up --force-recreate -d app
