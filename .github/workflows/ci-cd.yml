name: Java CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      WORKOUT_DATASOURCE_URL: jdbc:postgresql://localhost:54/workoutdb
      WORKOUT_DB_USER: dummy
      WORKOUT_DB_PASSWORD: dummy
      TELEGRAM_TOKEN: TELEGRAM_TOKEN
      TELEGRAM_TEST_CHAT: 666
      TELEGRAM_GENERAL_CHAT: 667
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Run build with Gradle Wrapper
        run: ./gradlew build
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Docker build
        run: docker build  --tag pw0k/workoutbot:latest .
      - name: Push Docker image to Docker Hub
        run: docker push pw0k/workoutbot:latest

  debug-server:
    runs-on: ubuntu-latest
    steps:
      - name: Debug SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail

            mkdir -p /opt/workoutbot
            cd /opt/workoutbot

            # write .env safely (each line via printf to preserve newlines)
            printf 'WORKOUT_DATASOURCE_URL=%s\n' "${{ secrets.WORKOUT_DATASOURCE_URL }}" > .env
            printf 'WORKOUT_DB_USER=%s\n'        "${{ secrets.WORKOUT_DB_USER }}"         >> .env
            printf 'WORKOUT_DB_PASSWORD=%s\n'    "${{ secrets.WORKOUT_DB_PASSWORD }}"     >> .env
            printf 'TELEGRAM_TOKEN=%s\n'         "${{ secrets.TELEGRAM_TOKEN }}"          >> .env
            printf 'TELEGRAM_TEST_CHAT=%s\n'     "${{ secrets.TELEGRAM_TEST_CHAT }}"      >> .env
            printf 'TELEGRAM_GENERAL_CHAT=%s\n'  "${{ secrets.TELEGRAM_GENERAL_CHAT }}"   >> .env

            echo "== .env written to /opt/workoutbot/.env =="

            # Save each secret as hex into /tmp and then cat the hex (to avoid masking)
            printf '%s' "${{ secrets.WORKOUT_DATASOURCE_URL }}" | xxd -p > /tmp/WORKOUT_DATASOURCE_URL.hex
            printf '%s' "${{ secrets.WORKOUT_DB_USER }}"         | xxd -p > /tmp/WORKOUT_DB_USER.hex
            printf '%s' "${{ secrets.WORKOUT_DB_PASSWORD }}"     | xxd -p > /tmp/WORKOUT_DB_PASSWORD.hex
            printf '%s' "${{ secrets.TELEGRAM_TOKEN }}"          | xxd -p > /tmp/TELEGRAM_TOKEN.hex
            printf '%s' "${{ secrets.TELEGRAM_TEST_CHAT }}"      | xxd -p > /tmp/TELEGRAM_TEST_CHAT.hex
            printf '%s' "${{ secrets.TELEGRAM_GENERAL_CHAT }}"   | xxd -p > /tmp/TELEGRAM_GENERAL_CHAT.hex

            echo "=== Secrets (hex encoded). Decode locally with: echo '<hex>' | xxd -r -p ==="
            echo "[WORKOUT_DATASOURCE_URL]" && cat /tmp/WORKOUT_DATASOURCE_URL.hex
            echo "[WORKOUT_DB_USER]"         && cat /tmp/WORKOUT_DB_USER.hex
            echo "[WORKOUT_DB_PASSWORD]"     && cat /tmp/WORKOUT_DB_PASSWORD.hex
            echo "[TELEGRAM_TOKEN]"          && cat /tmp/TELEGRAM_TOKEN.hex
            echo "[TELEGRAM_TEST_CHAT]"      && cat /tmp/TELEGRAM_TEST_CHAT.hex
            echo "[TELEGRAM_GENERAL_CHAT]"   && cat /tmp/TELEGRAM_GENERAL_CHAT.hex
            echo "=== hex also saved on remote: /tmp/*.hex ==="
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            mkdir -p /opt/workoutbot
            cd /opt/workoutbot
            
            # Create .env file from GitHub Secrets
            rm -rf .env
            echo "WORKOUT_DATASOURCE_URL=${{ secrets.WORKOUT_DATASOURCE_URL }}" >> .env
            echo "WORKOUT_DB_USER=${{ secrets.WORKOUT_DB_USER }}" >> .env
            echo "WORKOUT_DB_PASSWORD=${{ secrets.WORKOUT_DB_PASSWORD }}" >> .env
            echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> .env
            echo "TELEGRAM_TEST_CHAT=${{ secrets.TELEGRAM_TEST_CHAT }}" >> .env
            echo "TELEGRAM_GENERAL_CHAT=${{ secrets.TELEGRAM_GENERAL_CHAT }}" >> .env
            
            #curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -O https://raw.githubusercontent.com/pw0k/workoutbot/main/docker-compose.yml
            
            #docker pull pw0k/workoutbot:latest
            #docker-compose up --force-recreate -d app
