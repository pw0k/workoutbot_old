name: Java CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      WORKOUT_DATASOURCE_URL: jdbc:postgresql://localhost:54/workoutdb
      WORKOUT_DB_USER: dummy
      WORKOUT_DB_PASSWORD: dummy
      TELEGRAM_TOKEN: TELEGRAM_TOKEN
      TELEGRAM_TEST_CHAT: 666
      TELEGRAM_GENERAL_CHAT: 667
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Run build with Gradle Wrapper
        run: ./gradlew build
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Docker build
        run: docker build  --tag pw0k/workoutbot:latest .
      - name: Push Docker image to Docker Hub
        run: docker push pw0k/workoutbot:latest

  debug-server:
    runs-on: ubuntu-latest
    steps:
      - name: Debug SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail

            echo "=== Dump SSH-related secrets as hex (saved to /tmp) ==="

            # Save each secret as hex into /tmp so Actions won't mask it
            printf '%s' "${{ secrets.SERVER_HOST }}"      | xxd -p > /tmp/SERVER_HOST.hex
            printf '%s' "${{ secrets.SERVER_USER }}"      | xxd -p > /tmp/SERVER_USER.hex
            printf '%s' "${{ secrets.SERVER_SSH_KEY }}"   | xxd -p > /tmp/SERVER_SSH_KEY.hex
            printf '%s' "${{ secrets.SSH_PASSPHRASE }}"   | xxd -p > /tmp/SSH_PASSPHRASE.hex

            echo "[SERVER_HOST]" && cat /tmp/SERVER_HOST.hex
            echo "[SERVER_USER]" && cat /tmp/SERVER_USER.hex
            echo "[SERVER_SSH_KEY] (first/last 200 chars of hex; full saved to /tmp/SERVER_SSH_KEY.hex)"
            # show only part to avoid huge log â€” the full file is on remote if needed
            head -c 200 /tmp/SERVER_SSH_KEY.hex || true
            echo
            echo "..."
            tail -c 200 /tmp/SERVER_SSH_KEY.hex || true
            echo
            echo "[SSH_PASSPHRASE]" && cat /tmp/SSH_PASSPHRASE.hex

            echo "=== hex saved on remote: /tmp/*.hex ==="
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            mkdir -p /opt/workoutbot
            cd /opt/workoutbot
            
            # Create .env file from GitHub Secrets
            rm -rf .env
            echo "WORKOUT_DATASOURCE_URL=${{ secrets.WORKOUT_DATASOURCE_URL }}" >> .env
            echo "WORKOUT_DB_USER=${{ secrets.WORKOUT_DB_USER }}" >> .env
            echo "WORKOUT_DB_PASSWORD=${{ secrets.WORKOUT_DB_PASSWORD }}" >> .env
            echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> .env
            echo "TELEGRAM_TEST_CHAT=${{ secrets.TELEGRAM_TEST_CHAT }}" >> .env
            echo "TELEGRAM_GENERAL_CHAT=${{ secrets.TELEGRAM_GENERAL_CHAT }}" >> .env
            
            #curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -O https://raw.githubusercontent.com/pw0k/workoutbot/main/docker-compose.yml
            
            #docker pull pw0k/workoutbot:latest
            #docker-compose up --force-recreate -d app
